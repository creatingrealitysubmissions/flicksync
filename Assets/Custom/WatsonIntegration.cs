using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; using Photon;  public class WatsonIntegration : Photon.MonoBehaviour {  	public static WatsonIntegration instance;  	public int score; 	public int totalWords; 	public int totalWordsCorrect; 	public float percentageScore;  	private float secondsCount; 	private int minuteCount; 	private int hourCount; 	public string currentTime; 	public float currentTimer; 	public float totalTime; 	public GameObject visualTimer;  	public Image fillImage, bg;  	private ArrayList phrasesToSay; 	private string phraseToSay; 	private int phraseToSayLength; 	public int phraseNumber; 	public string myCharacter = ""; 	private int amountAllowedWrong; 	private bool correct; 	private bool timeOver; 	private bool firstTime; 	private bool playingAudio;  	public List <AudioSource> audioSourceSource; 	Dictionary<string, AudioSource> audioSources;  	public Text line, recordedText, countDown, percentShown; 	public Image recordingDot;  	private int allowedError; 	// Use this for initialization 	void Start () { 		fillImage = visualTimer.GetComponent<Image>(); 		instance = this; 		audioSources = new Dictionary<string, AudioSource> (); 		int i = 0; 		foreach (string str in LoadScript.instance.script.playableCharacters) { 			audioSources.Add (str, audioSourceSource[i]); 			i++; 		} 		audioSources.Add ("Dormouse", audioSourceSource [i]); 		//LoadScript.instance.script.lines [0].character 		//First we get all the phrases that Alice says, eliminating punctuation and trim it and set it to all lower case 		/*phrasesToSay = new ArrayList(); 		for (int i = 0; i < LoadScript.instance.script.lines.Length; i++) { 			if (LoadScript.instance.script.lines [i].character.Contains ("Alice")) { 				string toAdd = LoadScript.instance.script.lines [i].description [0]; 				toAdd = toAdd.Replace("\\p{P}+", ""); 				toAdd = toAdd.Trim (); 				toAdd = toAdd.ToLower (); 				phrasesToSay.Add (toAdd); 			} 		}  */  		totalWords = 1; 		totalWordsCorrect = 1; 		phraseNumber = 0; 		percentageScore = 0f; 		currentTimer = 31f; 		totalTime = 31f; 		fillImage.fillAmount = currentTimer / totalTime; 		visualTimer.SetActive (false); 		timeOver = true; 		firstTime = true; 		playingAudio = false; 	}  	// Update is called once per frame 	void Update () { 		percentageScore = ((float)totalWordsCorrect / (float)totalWords); 		percentShown.text = Mathf.Ceil(percentageScore * 100).ToString() + "%"; 		UpdateTimerUI (); 		line.text = LoadScript.instance.script.lines [phraseNumber].description [0]; 		if (ExampleStreaming.instance.Active && myCharacter == LoadScript.instance.script.lines [phraseNumber].character) { 			recordingDot.color = Color.white;             line.color = Color.black;             recordedText.color = Color.gray;             if(bg != null)
            {
                bg.color = Color.white;
            } 		}   else { 			recordingDot.color = Color.clear;             line.color = Color.clear;             recordedText.color = Color.clear;             if (bg != null)
            {
                bg.color = Color.clear;
            }
        }  		if (LoadScript.instance.script.lines [phraseNumber].character == myCharacter) { 			Debug.Log ("My Turn!"); 			if (firstTime == true) { 				timeOver = false; 				firstTime = false; 				currentTimer = 31f; 				visualTimer.SetActive (true); 				//scriptToUse.timeAmt = currentTimer; 			} 			else if (timeOver == false) { 				countDownTimer (); 			} 			setup (); 			string currentSpokenPhrase = recordedText.text.ToLower(); 			if (currentSpokenPhrase.Contains ("final")) { 				int index = currentSpokenPhrase.IndexOf ("("); 				if (index > 0) 					currentSpokenPhrase = currentSpokenPhrase.Substring (0, index); 				currentSpokenPhrase = currentSpokenPhrase.Trim (); 				string[] ssize = currentSpokenPhrase.Split (null); 				for (int i = 0; i < ssize.Length; i++) { 					if (!phraseToSay.Contains (ssize [i])) { 						allowedError--; 					} 					//Debug.Log (ssize [i]); 				}  				if (phraseToSayLength > ssize.Length) { 					allowedError = allowedError - (phraseToSayLength - ssize.Length); 					//totalWordsCorrect = totalWordsCorrect - (phraseToSayLength - ssize.Length); 				}  				if (allowedError >= 0) { 					//Debug.Log ("Correct!"); 					totalWordsCorrect = totalWordsCorrect + allowedError + (phraseToSayLength/2); 					totalWords = totalWords + phraseToSayLength; 					timerOver (); 				}   else { 					//Debug.Log ("Phrase Number: " + phraseNumber + ", currentSpokenPhrase: " + currentSpokenPhrase + ", phraseToSay " + phraseToSay); 					//Debug.Log (currentTime+GetComponent<UnityEngine.UI.Text> ().text); 				} 			}   else { 				//Debug.Log ("No Phrase"); 			} 		} 		else if(PhotonNetwork.playerList.Length==1){ 			if(LoadScript.instance.script.lines [phraseNumber].character != "Alice"){ 				playAudio(); 			} 		} 		else if(PhotonNetwork.playerList.Length==2){ 			if(LoadScript.instance.script.lines [phraseNumber].character != "Alice" && LoadScript.instance.script.lines [phraseNumber].character != "Hare"){ 				playAudio(); 			} 			Debug.Log("Two players: not my turn"); 		} 		else if(PhotonNetwork.playerList.Length==3){ 			playAudio(); 		} 		//		if (Input.GetKeyDown (KeyCode.A)) { 		//			ExampleStreaming.instance.Active = false; 		//			ExampleStreaming.instance.Active = true; 		//		} 		//Debug.Log(PhotonNetwork.playerList.Length); 	}  	void NextPhrase(){ 		playingAudio = false; 		phraseNumber++; 		if (LoadScript.instance.script.lines [phraseNumber].character != myCharacter) { 			ExampleStreaming.instance.Active = false; 		}   else { 			ExampleStreaming.instance.Active = true; 		} 		//timeOver = false; 		//currentTimer = 21f; 	}  	IEnumerator PlayAIAudio(){ 		playingAudio = true; 		AudioClip clip = (AudioClip)Resources.Load (LoadScript.instance.script.lines [phraseNumber].audioFile); 		audioSources [LoadScript.instance.script.lines [phraseNumber].character].clip = clip; 		audioSources [LoadScript.instance.script.lines [phraseNumber].character].Play (); 		//Debug.Log (LoadScript.instance.script.lines [phraseNumber].audioFile); 		yield return new WaitForSeconds (clip.length); 		NextPhrase (); 	}  	public void UpdateTimerUI(){ 		//set timer UI 		secondsCount += Time.deltaTime; 		currentTime = hourCount +"h:"+ minuteCount +"m:"+(int)secondsCount + "s "; 		if(secondsCount >= 60){ 			minuteCount++; 			secondsCount = 0; 		}else if(minuteCount >= 60){ 			hourCount++; 			minuteCount = 0; 		}       	}  	public void setup(){ 		phraseToSay = LoadScript.instance.script.lines [phraseNumber].description[0]; 		string[] ssize = phraseToSay.Split(null); 		phraseToSayLength = ssize.Length; 		amountAllowedWrong = ssize.Length/2; 		correct = true; 		allowedError = amountAllowedWrong; 	}  	void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info) 	{ 		if (stream.isWriting) 		{ 			// We own this player: send the others our data 			stream.SendNext(phraseNumber); 		} 		else 		{ 			// Network player, receive data 			phraseNumber = (int)stream.ReceiveNext(); 		} 	}  	void countDownTimer(){ 		//PhotonNetwork.playerList.Length 		//LoadScript.instance.script.playableCharacters 		currentTimer-=Time.deltaTime; 		//int tempTimer = (int)currentTimer; 		fillImage.fillAmount = currentTimer / totalTime; 		//string toDisplay = tempTimer.ToString (); 		//countDown.text = toDisplay; 		if (currentTimer <= 0f) { 			totalWords = totalWords + phraseToSayLength; 			timerOver (); 		} 	}  	void timerOver(){ 		currentTimer = 0f; 		countDown.text = ""; 		timeOver = true; 		firstTime = true; 		visualTimer.SetActive (false); 		NextPhrase (); 	}  	void playAudio(){ 		if (playingAudio == false) { 			playingAudio = true; 			StartCoroutine("PlayAIAudio"); 		} 	} }   